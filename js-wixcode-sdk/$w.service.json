{ "name": "$w",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "filename": "wixCode.es6",
      "lineno": 35 },
  "docs":
    { "summary": "The `$w` namespace contains everything you need in order to work\n with your site's components. It contains all of the UI elements, nodes, and\n events that make up your site. It also includes the [`$w()`](#w),\n [`onReady()`](#onReady) function.\n\n The APIs in `$w` can only be used in front-end code.\n\n You do not need to import `$w`.",
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "The `$w` namespace contains everything you need in order to work\n with your site's components. It contains all of the UI elements, nodes, and\n events that make up your site. It also includes the [`$w()`](#w),\n [`onReady()`](#onReady) function.\n\n The APIs in `$w` can only be used in front-end code.\n\n You do not need to import `$w`.",
      "links": [],
      "examples": [] },
  "properties": [],
  "operations":
    [ { "name": "$w",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "getWixSelector",
              "type": "string",
              "doc": "A selector or multiple comma-separated selectors.",
              "srcDoc": "A selector or multiple comma-separated selectors." } ],
        "ret":
          { "type":
              [ "$w.Element",
                { "name": "Array",
                  "typeParams":
                    [ "$w.Element" ] } ],
            "doc": "A single element or an array of elements.",
            "srcDoc": "A single element or an array of elements." },
        "locations":
          [ { "filename": "wixCode.es6",
              "lineno": 47 } ],
        "docs":
          { "summary": "Selects and returns elements from a page.",
            "description":
              [ "The `$w()` function selects single or multiple elements by ID or type.",
                "",
                " To select by ID, pass a selector string with the hash symbol",
                " (`#`) followed by the ID of the item you want to select (e.g. `\"#myElement\"`).",
                " The function will return the selected element object.",
                "",
                " To select by type, pass a selector string with the name of",
                " the type without the preceding `#` (e.g. `\"Button\"`). The function will return",
                " an array of the selected element objects. An array is returned even if one",
                " or no elements are selected.",
                "",
                " To select using multiple selectors, pass a selector string with",
                " multiple selectors separated by commas. The selectors in the",
                " comma-separated string can be ID selectors, type selectors, or a mixture of",
                " the two. The function will return an array of the selected element objects.",
                " An array is returned even if one or no elements are selected. If two or more",
                " selectors select the same element, it will still be returned only once in",
                " the array." ],
            "links": [],
            "examples":
              [ { "title": "Select an element using its ID",
                  "body":
                    [ "let myElement = $w(\"#myElement\");",
                      "",
                      "let elementType = myElement.type; // \"$w.Type\"" ] },
                { "title": "Select elements by type",
                  "body":
                    [ "let typeElements = $w(\"Type\");",
                      "",
                      "let firstOfType = typeElements[0];" ] },
                { "title": "Select all the images on the page",
                  "body":
                    [ "let imageElements = $w(\"Image\");",
                      "",
                      "let firstImage = imageElements[0];" ] },
                { "title": "Select elements using a multiple selectors",
                  "body":
                    [ "let selected = $w(\"#myElement1, #myElement3, Type\");" ] },
                { "title": "Hide all the page's images",
                  "body":
                    [ "$w(\"Image\").hide();" ] } ] },
        "srcDocs":
          { "summary": "Selects and returns elements from a page.",
            "description":
              [ "The `$w()` function selects single or multiple elements by ID or type.",
                "",
                " To select by ID, pass a selector string with the hash symbol",
                " (`#`) followed by the ID of the item you want to select (e.g. `\"#myElement\"`).",
                " The function will return the selected element object.",
                "",
                " To select by type, pass a selector string with the name of",
                " the type without the preceding `#` (e.g. `\"Button\"`). The function will return",
                " an array of the selected element objects. An array is returned even if one",
                " or no elements are selected.",
                "",
                " To select using multiple selectors, pass a selector string with",
                " multiple selectors separated by commas. The selectors in the",
                " comma-separated string can be ID selectors, type selectors, or a mixture of",
                " the two. The function will return an array of the selected element objects.",
                " An array is returned even if one or no elements are selected. If two or more",
                " selectors select the same element, it will still be returned only once in",
                " the array." ],
            "links": [],
            "examples":
              [ { "title": "Select an element using its ID",
                  "body":
                    [ "let myElement = $w(\"#myElement\");",
                      "",
                      "let elementType = myElement.type; // \"$w.Type\"" ] },
                { "title": "Select elements by type",
                  "body":
                    [ "let typeElements = $w(\"Type\");",
                      "",
                      "let firstOfType = typeElements[0];" ] },
                { "title": "Select all the images on the page",
                  "body":
                    [ "let imageElements = $w(\"Image\");",
                      "",
                      "let firstImage = imageElements[0];" ] },
                { "title": "Select elements using a multiple selectors",
                  "body":
                    [ "let selected = $w(\"#myElement1, #myElement3, Type\");" ] },
                { "title": "Hide all the page's images",
                  "body":
                    [ "$w(\"Image\").hide();" ] } ] } },
      { "name": "onReady",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "initFunction",
              "type": "$w.ReadyHandler",
              "doc": "The name of the function or the function expression to run when the page has finished loading.",
              "srcDoc": "The name of the function or the function expression to run when the page has finished loading." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "wixCode.es6",
              "lineno": 89 } ],
        "docs":
          { "summary": "Sets the function that runs when all the page elements have finished loading.",
            "description":
              [ "Use the `onReady()` function for code you want to run before the user starts",
                " interacting with your page.",
                "",
                " The following code should be placed inside the `onReady()` event handler:",
                "",
                " + Initialization of element properties - Example: setting a text element's initial text value",
                " + Function calls on elements to set their initial state - Example: disabling a button",
                " + Dynamic event handlers that you want bound when the page loads - Example: setting an event handler to be called when the mouse pointer enters an element",
                "",
                "",
                " Note that static event handlers, those that are wired in the Properties panel",
                " in the Editor, are not placed inside inside the `onReady()` event handler.",
                "",
                " Note that the `onReady()` function in the **Site** tab is called before the",
                " `onReady()` function in the **Page** tab." ],
            "links":
              [ "[$w( )](#w)" ],
            "examples":
              [ { "title": "Run code in an anonymous function when the page loads",
                  "body":
                    [ "$w.onReady( function() {",
                      "  let pageTitle = $w(\"#page1\").title;",
                      "} );" ] },
                { "title": "Where to place code",
                  "body":
                    [ "// Import statement go at the top of your code, outsite of onReady()",
                      "import wixWindow from 'wix-window';",
                      "",
                      "// Initialization statements without $w() don't need to be in onReady()",
                      "let hideCount = 0;",
                      "",
                      "// Code you want to run when the page loads",
                      "$w.onReady(function () {",
                      "  console.log(`Device viewing site is: ${wixWindow.formFactor}`);",
                      "",
                      "  // Initialize an element property",
                      "  $w(\"#myTextElement\").text = \"Hover over to hide\";",
                      "",
                      "  // Call a function on an element to set its initial state",
                      "  $w(\"#buttonReset\").disable();",
                      "",
                      "  // Dynamic event handler to be bound when the page loads",
                      "  $w(\"#myTextElement\").onMouseIn( (event, $w) => {",
                      "    event.target.hide();",
                      "    console.log(`Hidden ${++hideCount} times`);",
                      "    $w(\"#buttonReset\").enable();",
                      "  } );",
                      "} );",
                      "",
                      "// Static event handler",
                      "export function buttonReset_onClick(event) {",
                      "\t$w(\"#myTextElement\").show();",
                      "  $w(\"#buttonReset\").disable();",
                      "}" ] } ] },
        "srcDocs":
          { "summary": "Sets the function that runs when all the page elements have finished loading.",
            "description":
              [ "Use the `onReady()` function for code you want to run before the user starts",
                " interacting with your page.",
                "",
                " The following code should be placed inside the `onReady()` event handler:",
                "",
                " + Initialization of element properties - Example: setting a text element's initial text value",
                " + Function calls on elements to set their initial state - Example: disabling a button",
                " + Dynamic event handlers that you want bound when the page loads - Example: setting an event handler to be called when the mouse pointer enters an element",
                "",
                "",
                " Note that static event handlers, those that are wired in the Properties panel",
                " in the Editor, are not placed inside inside the `onReady()` event handler.",
                "",
                " Note that the `onReady()` function in the **Site** tab is called before the",
                " `onReady()` function in the **Page** tab." ],
            "links":
              [ "[$w( )](#w)" ],
            "examples":
              [ { "title": "Run code in an anonymous function when the page loads",
                  "body":
                    [ "$w.onReady( function() {",
                      "  let pageTitle = $w(\"#page1\").title;",
                      "} );" ] },
                { "title": "Where to place code",
                  "body":
                    [ "// Import statement go at the top of your code, outsite of onReady()",
                      "import wixWindow from 'wix-window';",
                      "",
                      "// Initialization statements without $w() don't need to be in onReady()",
                      "let hideCount = 0;",
                      "",
                      "// Code you want to run when the page loads",
                      "$w.onReady(function () {",
                      "  console.log(`Device viewing site is: ${wixWindow.formFactor}`);",
                      "",
                      "  // Initialize an element property",
                      "  $w(\"#myTextElement\").text = \"Hover over to hide\";",
                      "",
                      "  // Call a function on an element to set its initial state",
                      "  $w(\"#buttonReset\").disable();",
                      "",
                      "  // Dynamic event handler to be bound when the page loads",
                      "  $w(\"#myTextElement\").onMouseIn( (event, $w) => {",
                      "    event.target.hide();",
                      "    console.log(`Hidden ${++hideCount} times`);",
                      "    $w(\"#buttonReset\").enable();",
                      "  } );",
                      "} );",
                      "",
                      "// Static event handler",
                      "export function buttonReset_onClick(event) {",
                      "\t$w(\"#myTextElement\").show();",
                      "  $w(\"#buttonReset\").disable();",
                      "}" ] } ] } } ],
  "callbacks":
    [ { "name": "EventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.Event",
              "doc": "The event that occurred.",
              "srcDoc": "The event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "WixEvent.es6",
              "lineno": 3 } ],
        "docs":
          { "description":
              [ "Handles events." ],
            "links": [],
            "examples": [] },
        "srcDocs":
          { "description":
              [ "Handles events." ],
            "links": [],
            "examples": [] } },
      { "name": "ForItemCallback",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "selector",
              "type": "$w.$w",
              "doc": "A selector function with [repeated item scope](#repeated-item-scope).",
              "srcDoc": "A selector function with [repeated item scope](#repeated-item-scope)." },
            { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the current repeated item.",
              "srcDoc": "The object from the repeater's `data` array that corresponds to the current repeated item." },
            { "name": "index",
              "type": "number",
              "doc": "The index of the `itemData` object in the `data` array.",
              "srcDoc": "The index of the `itemData` object in the `data` array." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 519 } ],
        "docs":
          { "description":
              [ "Runs for items in a repeater." ],
            "links": [],
            "examples": [] },
        "srcDocs":
          { "description":
              [ "Runs for items in a repeater." ],
            "links": [],
            "examples": [] } },
      { "name": "GalleryItemChangedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.GalleryItemChangedEvent",
              "doc": "The event that occurred.",
              "srcDoc": "The event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "GalleryItemChangedEvent.es6",
              "lineno": 20 } ],
        "docs":
          { "summary": "Handles events fired when a gallery moves to a new image.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Handles events fired when a gallery moves to a new image.",
            "links": [],
            "examples": [] } },
      { "name": "GalleryItemClickedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.GalleryItemClickedEvent",
              "doc": "The event that has occurred.",
              "srcDoc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "GalleryItemClickedEvent.es6",
              "lineno": 3 } ],
        "docs":
          { "summary": "Handles events fired when an image in a gallery is clicked.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Handles events fired when an image in a gallery is clicked.",
            "links": [],
            "examples": [] } },
      { "name": "HtmlComponentMessageEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.HtmlComponentMessageEvent",
              "doc": "The HtmlComponent event that occurred.",
              "srcDoc": "The HtmlComponent event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "HtmlComponentMessageEvent.es6",
              "lineno": 4 } ],
        "docs":
          { "summary": "Handles events fired when the code in an HtmlComponent sends a message.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Handles events fired when the code in an HtmlComponent sends a message.",
            "links": [],
            "examples": [] } },
      { "name": "HtmlElementEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.HtmlComponentMessageEvent",
              "doc": "The message event that occurred.",
              "srcDoc": "The message event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "HtmlComponent.es6",
              "lineno": 7 } ],
        "docs":
          { "description":
              [ "Handles events fired when a message is received from an HTML",
                " Component." ],
            "links": [],
            "examples": [] },
        "srcDocs":
          { "description":
              [ "Handles events fired when a message is received from an HTML",
                " Component." ],
            "links": [],
            "examples": [] } },
      { "name": "ItemReadyEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "selector",
              "type": "$w.$w",
              "doc": "A selector function with [repeated item scope](#repeated-item-scope).",
              "srcDoc": "A selector function with [repeated item scope](#repeated-item-scope)." },
            { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the repeated item being created.",
              "srcDoc": "The object from the repeater's `data` array that corresponds to the repeated item being created." },
            { "name": "index",
              "type": "number",
              "doc": "The index of the `itemData` object in the `data` array.",
              "srcDoc": "The index of the `itemData` object in the `data` array." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 403 } ],
        "docs":
          { "description":
              [ "Handles repeater item ready events." ],
            "links": [],
            "examples": [] },
        "srcDocs":
          { "description":
              [ "Handles repeater item ready events." ],
            "links": [],
            "examples": [] } },
      { "name": "ItemRemovedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the repeated item being removed.",
              "srcDoc": "The object from the repeater's `data` array that corresponds to the repeated item being removed." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 477 } ],
        "docs":
          { "description":
              [ "Handles repeater item removed events." ],
            "links": [],
            "examples": [] },
        "srcDocs":
          { "description":
              [ "Handles repeater item removed events." ],
            "links": [],
            "examples": [] } },
      { "name": "KeyboardEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.KeyboardEvent",
              "doc": "The keyboard event that occurred.",
              "srcDoc": "The keyboard event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "KeyboardEvent.es6",
              "lineno": 4 } ],
        "docs":
          { "summary": "Handles events fired when the keyboard is pressed.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Handles events fired when the keyboard is pressed.",
            "links": [],
            "examples": [] } },
      { "name": "LoginHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "user",
              "type": "wix-users.User",
              "doc": "The user that has logged in.",
              "srcDoc": "The user that has logged in." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "users.es6",
              "lineno": 378 } ],
        "docs":
          { "summary": "Function that runs when a user has logged in.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Function that runs when a user has logged in.",
            "links": [],
            "examples": [] } },
      { "name": "MouseEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.MouseEvent",
              "doc": "The mouse event that occurred.",
              "srcDoc": "The mouse event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "MouseEvent.es6",
              "lineno": 4 } ],
        "docs":
          { "summary": "Handles events fired when the mouse is clicked.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Handles events fired when the mouse is clicked.",
            "links": [],
            "examples": [] } },
      { "name": "ReadyHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "filename": "wixCode.es6",
              "lineno": 81 } ],
        "docs":
          { "summary": "Function that runs when all page elements have finished loading.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Function that runs when all page elements have finished loading.",
            "links": [],
            "examples": [] } },
      { "name": "TableCellEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.TableCellEvent",
              "doc": "The table cell event that occurred.",
              "srcDoc": "The table cell event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "TableCellEvent.es6",
              "lineno": 14 } ],
        "docs":
          { "summary": "Handles events fired when a table cell is selected.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Handles events fired when a table cell is selected.",
            "links": [],
            "examples": [] } },
      { "name": "TableRowEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.TableRowEvent",
              "doc": "The event that has occurred.",
              "srcDoc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "A selector function.",
              "srcDoc": "A selector function." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "TableRowEvent.es6",
              "lineno": 14 } ],
        "docs":
          { "summary": "Handles events fired when a table row is selected.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Handles events fired when a table row is selected.",
            "links": [],
            "examples": [] } },
      { "name": "Validator",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "value",
              "type":
                [ "string",
                  { "name": "Array",
                    "typeParams":
                      [ "$w.UploadButton~File" ] },
                  "boolean" ],
              "doc": "The value of the element being validated.",
              "srcDoc": "The value of the element being validated." },
            { "name": "reject",
              "type": "Function",
              "doc": "A function that invalidates the element with the specified message.",
              "srcDoc": "A function that invalidates the element with the specified message." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "ValidatableMixin.es6",
              "lineno": 134 } ],
        "docs":
          { "summary": "Function that runs when custom validation is checked.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Function that runs when custom validation is checked.",
            "links": [],
            "examples": [] } } ],
  "messages": [] }