{ "name": "DatePicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "filename": "DatePicker.es6",
      "lineno": 18 },
  "docs":
    { "summary": "A `DatePicker` is used for entering dates. It let's users populate a\n date field by picking a date using a calendar popup.",
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "A `DatePicker` is used for entering dates. It let's users populate a\n date field by picking a date using a calendar popup.",
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "disabledDates",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Date" ] },
        "locations":
          [ { "filename": "DatePicker.es6",
              "lineno": 186 } ],
        "docs":
          { "summary": "Sets or gets the dates that a user cannot select.",
            "description":
              [ "Setting the `disabledDates` property prevents users from",
                " selecting the specified dates. However, it does not limit your ability",
                " to set those dates programmatically.",
                "",
                " Set `disabledDates` to an empty array (`[]`) to remove the current disabled dates.",
                "",
                " Getting the `disabledDates` property returns the current",
                " list of disabled dates." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)" ],
            "examples":
              [ { "title": "Get dates which are disabled",
                  "body":
                    [ "let dates = $w(\"#myDatePicker\").disabledDates;",
                      "",
                      "let firstAsStr = dates[0].toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set dates which are disabled",
                  "body":
                    [ "let badDate1 = new Date(2017, 0, 13);",
                      "let badDate2 = new Date(2017, 9, 13);",
                      "",
                      "$w(\"#myDatePicker\").disabledDates = [badDate1, badDate2];" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the dates that a user cannot select.",
            "description":
              [ "Setting the `disabledDates` property prevents users from",
                " selecting the specified dates. However, it does not limit your ability",
                " to set those dates programmatically.",
                "",
                " Set `disabledDates` to an empty array (`[]`) to remove the current disabled dates.",
                "",
                " Getting the `disabledDates` property returns the current",
                " list of disabled dates." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)" ],
            "examples":
              [ { "title": "Get dates which are disabled",
                  "body":
                    [ "let dates = $w(\"#myDatePicker\").disabledDates;",
                      "",
                      "let firstAsStr = dates[0].toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set dates which are disabled",
                  "body":
                    [ "let badDate1 = new Date(2017, 0, 13);",
                      "let badDate2 = new Date(2017, 9, 13);",
                      "",
                      "$w(\"#myDatePicker\").disabledDates = [badDate1, badDate2];" ] } ] } },
      { "name": "disabledDaysOfWeek",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "filename": "DatePicker.es6",
              "lineno": 239 } ],
        "docs":
          { "summary": "Sets or gets the days of the week that a user cannot select.",
            "description":
              [ "Setting the `disabledDaysOfWeek` property prevents users",
                " from selecting the specified days of the weeks. However, it does not",
                " limit your ability to set those dates programmatically. Set",
                " `disabledDaysOfWeek` to an empty array (`[]`) to remove the current",
                " disabled days of the week.",
                "",
                " Getting the `disabledDaysOfWeek` property returns the",
                " current list of disabled days of the week.",
                "",
                " The `disabledDaysOfWeek` property accepts an array of integers from 0 to",
                " 6, where 0 represent Sunday, 1 is Monday, 2 is Tuesday, and so on." ],
            "links":
              [ "[disabledDates](#disabledDates)" ],
            "examples":
              [ { "title": "Get which days of the week are disabled",
                  "body":
                    [ "let days = $w(\"#myDatePicker\").disabledDaysOfWeek;",
                      "",
                      "let secondDisabledDay = days[1]; // 6" ] },
                { "title": "Set Sundays and Saturdays to be disabled",
                  "body":
                    [ "$w(\"#myDatePicker\").disabledDaysOfWeek = [0, 6];" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the days of the week that a user cannot select.",
            "description":
              [ "Setting the `disabledDaysOfWeek` property prevents users",
                " from selecting the specified days of the weeks. However, it does not",
                " limit your ability to set those dates programmatically. Set",
                " `disabledDaysOfWeek` to an empty array (`[]`) to remove the current",
                " disabled days of the week.",
                "",
                " Getting the `disabledDaysOfWeek` property returns the",
                " current list of disabled days of the week.",
                "",
                " The `disabledDaysOfWeek` property accepts an array of integers from 0 to",
                " 6, where 0 represent Sunday, 1 is Monday, 2 is Tuesday, and so on." ],
            "links":
              [ "[disabledDates](#disabledDates)" ],
            "examples":
              [ { "title": "Get which days of the week are disabled",
                  "body":
                    [ "let days = $w(\"#myDatePicker\").disabledDaysOfWeek;",
                      "",
                      "let secondDisabledDay = days[1]; // 6" ] },
                { "title": "Set Sundays and Saturdays to be disabled",
                  "body":
                    [ "$w(\"#myDatePicker\").disabledDaysOfWeek = [0, 6];" ] } ] } },
      { "name": "maxDate",
        "labels": [],
        "get": true,
        "set": false,
        "type": "Date",
        "locations":
          [ { "filename": "DatePicker.es6",
              "lineno": 87 } ],
        "docs":
          { "summary": "Sets or gets the latest date that a user can select.",
            "description":
              [ "Setting the `maxDate` property prevents users from selecting",
                "dates past the maximum date. However, it does not limit your ability to",
                "change the date picker's value to one that exceeds `maxDate`",
                "programmatically.",
                "",
                "Set `maxDate` to `undefined` to remove the",
                "current maximum date limitation.",
                "",
                "Getting the `maxDate` property returns the current maximum",
                "date that a user can select." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get a date picker's maximum date",
                  "body":
                    [ "let pickerMaxDate = $w(\"#myDatePicker\").maxDate;",
                      "",
                      "let maxStr = pickerMaxDate.toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set a date picker's maximum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").maxDate = new Date();" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the latest date that a user can select.",
            "description":
              [ "Setting the `maxDate` property prevents users from selecting",
                "dates past the maximum date. However, it does not limit your ability to",
                "change the date picker's value to one that exceeds `maxDate`",
                "programmatically.",
                "",
                "Set `maxDate` to `undefined` to remove the",
                "current maximum date limitation.",
                "",
                "Getting the `maxDate` property returns the current maximum",
                "date that a user can select." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get a date picker's maximum date",
                  "body":
                    [ "let pickerMaxDate = $w(\"#myDatePicker\").maxDate;",
                      "",
                      "let maxStr = pickerMaxDate.toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set a date picker's maximum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").maxDate = new Date();" ] } ] } },
      { "name": "minDate",
        "labels": [],
        "get": true,
        "set": false,
        "type": "Date",
        "locations":
          [ { "filename": "DatePicker.es6",
              "lineno": 137 } ],
        "docs":
          { "summary": "Sets or gets the earliest date that a user can select.",
            "description":
              [ "Setting the `minDate` property prevents users from selecting",
                "dates before the minimum date. However, it does not limit your ability to",
                "change the date picker's value to one that preceeds `minDate`",
                "programmatically.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting the `minDate` property returns the current minimum",
                "date that a user can select." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get a date picker's minimum date",
                  "body":
                    [ "let pickerMinDate = $w(\"#myDatePicker\").minDate;",
                      "",
                      "let minStr = pickerMinDate.toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set a date picker's minimum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").minDate = new Date();" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the earliest date that a user can select.",
            "description":
              [ "Setting the `minDate` property prevents users from selecting",
                "dates before the minimum date. However, it does not limit your ability to",
                "change the date picker's value to one that preceeds `minDate`",
                "programmatically.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting the `minDate` property returns the current minimum",
                "date that a user can select." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get a date picker's minimum date",
                  "body":
                    [ "let pickerMinDate = $w(\"#myDatePicker\").minDate;",
                      "",
                      "let minStr = pickerMinDate.toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set a date picker's minimum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").minDate = new Date();" ] } ] } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": false,
        "type": "Date",
        "locations":
          [ { "filename": "DatePicker.es6",
              "lineno": 43 } ],
        "docs":
          { "summary": "Sets or gets the value of the date picker.",
            "links": [],
            "examples":
              [ { "title": "Get a datepicker's date value",
                  "body":
                    [ "let date = $w(\"#myDatePicker\").value;",
                      "",
                      "let valStr = date.toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set a datepicker's date value to be today",
                  "body":
                    [ "$w(\"#myDatePicker\").value = new Date();" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the value of the date picker.",
            "links": [],
            "examples":
              [ { "title": "Get a datepicker's date value",
                  "body":
                    [ "let date = $w(\"#myDatePicker\").value;",
                      "",
                      "let valStr = date.toDateString(); // \"Fri Jan 13 2017\"" ] },
                { "title": "Set a datepicker's date value to be today",
                  "body":
                    [ "$w(\"#myDatePicker\").value = new Date();" ] } ] } } ],
  "operations": [],
  "callbacks": [],
  "messages": [] }