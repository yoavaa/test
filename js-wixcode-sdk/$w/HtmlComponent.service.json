{ "name": "HtmlComponent",
  "memberOf": "$w",
  "mixes":
    [ "$w.IFrame" ],
  "labels":
    [ "new" ],
  "location":
    { "filename": "HtmlComponent.es6",
      "lineno": 15 },
  "docs":
    { "summary": "A container for internal or external HTML code. Messages can be sent\n from your page code to the code in an HTML component and from the HTML\n component to your page code using the [`postMessage()`](#postMessage) and\n [`onMessage()`](#onMessage) functions. To learn more about what code an HTML\n component can hold, see <a href=\"https://support.wix.com/en/article/guidelines-and-limitations-of-the-html-code-and-embed-a-site-elements\" target=\"_blank\">here</a>.\n\n For an overview of working with an HTML Component using code, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code\" target=\"_blank\">Working with the HTML Component in Wix Code</a>.",
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "A container for internal or external HTML code. Messages can be sent\n from your page code to the code in an HTML component and from the HTML\n component to your page code using the [`postMessage()`](#postMessage) and\n [`onMessage()`](#onMessage) functions. To learn more about what code an HTML\n component can hold, see <a href=\"https://support.wix.com/en/article/guidelines-and-limitations-of-the-html-code-and-embed-a-site-elements\" target=\"_blank\">here</a>.\n\n For an overview of working with an HTML Component using code, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code\" target=\"_blank\">Working with the HTML Component in Wix Code</a>.",
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "scrolling",
        "labels": [],
        "get": false,
        "set": false,
        "type": "void",
        "locations":
          [ { "filename": "HtmlComponent.es6",
              "lineno": 65 } ],
        "docs":
          { "summary": "Sets or gets whether the HTML Component displays scrollbars.",
            "description":
              [ "Setting the `scrolling` property sets what happens when the content in",
                " the HTML Component is larger than the size of the component.",
                "",
                " The value can be set to:",
                " + `\"auto\"`: Scrollbars are displayed only if needed. (This is the default.)",
                " + `\"yes\"`: Scrollbars are always shown, even if they are not needed.",
                " + `\"no\"`: Scrollbars are never shown, even if they are needed).",
                "",
                " Getting the `scrolling` property returns which `ScrollType` the component",
                " is set to use." ],
            "links": [],
            "examples":
              [ { "title": "Set whether the Html Component displays scrollbars",
                  "body":
                    [ "$w(\"#myHtmlComponent\").scrolling = \"no\";" ] },
                { "title": "Get whether the Html Component displays scrollbars",
                  "body":
                    [ "let compScrolling = $w(\"#myHtmlComponent\").scrolling; // \"auto\"" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets whether the HTML Component displays scrollbars.",
            "description":
              [ "Setting the `scrolling` property sets what happens when the content in",
                " the HTML Component is larger than the size of the component.",
                "",
                " The value can be set to:",
                " + `\"auto\"`: Scrollbars are displayed only if needed. (This is the default.)",
                " + `\"yes\"`: Scrollbars are always shown, even if they are not needed.",
                " + `\"no\"`: Scrollbars are never shown, even if they are needed).",
                "",
                " Getting the `scrolling` property returns which `ScrollType` the component",
                " is set to use." ],
            "links": [],
            "examples":
              [ { "title": "Set whether the Html Component displays scrollbars",
                  "body":
                    [ "$w(\"#myHtmlComponent\").scrolling = \"no\";" ] },
                { "title": "Get whether the Html Component displays scrollbars",
                  "body":
                    [ "let compScrolling = $w(\"#myHtmlComponent\").scrolling; // \"auto\"" ] } ] } },
      { "name": "src",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "HtmlComponent.es6",
              "lineno": 33 } ],
        "docs":
          { "summary": "Sets or gets the URL of the HTML Component's code.",
            "description":
              [ "Setting the `src` property sets the website that is",
                " displayed in the HTML Component. The `src` value must be set to an HTTPS",
                " URL.",
                "",
                " Getting the `src` property returns the URL of the website",
                " that is displayed in the HTML Component." ],
            "links": [],
            "examples":
              [ { "title": "Get the displayed website's URL",
                  "body":
                    [ "let compUrl = $w(\"#myHtmlComponent\").src;",
                      "// \"https://comp.com/page.html\"" ] },
                { "title": "Set the displayed website",
                  "body":
                    [ "$w(\"#myHtmlComponent\").src = \"https://en.wikipedia.org/wiki/HTTPS\";" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the URL of the HTML Component's code.",
            "description":
              [ "Setting the `src` property sets the website that is",
                " displayed in the HTML Component. The `src` value must be set to an HTTPS",
                " URL.",
                "",
                " Getting the `src` property returns the URL of the website",
                " that is displayed in the HTML Component." ],
            "links": [],
            "examples":
              [ { "title": "Get the displayed website's URL",
                  "body":
                    [ "let compUrl = $w(\"#myHtmlComponent\").src;",
                      "// \"https://comp.com/page.html\"" ] },
                { "title": "Set the displayed website",
                  "body":
                    [ "$w(\"#myHtmlComponent\").src = \"https://en.wikipedia.org/wiki/HTTPS\";" ] } ] } } ],
  "operations":
    [ { "name": "allowFullScreen",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "$w.HtmlComponent" },
        "locations":
          [ { "filename": "HtmlComponent.es6",
              "lineno": 225 } ],
        "docs":
          { "summary": "Allows the HTML Component to be put into full screen mode.",
            "description":
              [ "By default, users cannot place the HTML Component in full screen mode. Calling",
                " this function allows a user to place the HTML Component in full screen mode." ],
            "links": [],
            "examples":
              [ { "title": "Allow an HTML Component to be placed in full screen mode",
                  "body":
                    [ "$w(\"#myHtmlComponent\").allowFullScreen();" ] } ] },
        "srcDocs":
          { "summary": "Allows the HTML Component to be put into full screen mode.",
            "description":
              [ "By default, users cannot place the HTML Component in full screen mode. Calling",
                " this function allows a user to place the HTML Component in full screen mode." ],
            "links": [],
            "examples":
              [ { "title": "Allow an HTML Component to be placed in full screen mode",
                  "body":
                    [ "$w(\"#myHtmlComponent\").allowFullScreen();" ] } ] } },
      { "name": "onMessage",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.HtmlComponentMessageEventHandler",
              "doc": "The name of the function or\n the function expression to run when the HTML Component sends a message.",
              "srcDoc": "The name of the function or\n the function expression to run when the HTML Component sends a message." } ],
        "ret":
          { "type": "$w.HtmlComponent",
            "doc": "The HTML Code element that triggered the event.",
            "srcDoc": "The HTML Code element that triggered the event." },
        "locations":
          [ { "filename": "HtmlComponent.es6",
              "lineno": 168 } ],
        "docs":
          { "summary": "Adds an event handler that will run when the HTML Component\n sends a message.",
            "description":
              [ "The `onMessage()` function allows your page code to receive messages",
                " from an HTML Component on your page. When a message is received,",
                " the specified event handler is executed and the message can be retrieved",
                " using `event.data`.",
                "",
                " To send a message from your HTML Component, use the postMessage() function",
                " in the HTML component's code. Generally, you will be calling postMessage()",
                " from within a function:",
                "",
                "     &lt;script type=\"text/javascript\"&gt;",
                "       function sendReturnMessage(msg) {",
                "         window.parent.postMessage(msg, \"*\");",
                "       }",
                "     &lt;/script&gt;",
                "",
                "",
                " For more information on sending and receiving messages between your page",
                " and your HTML Component, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code#messaging-1\" target=\"_blank\">Working with the HTML Component in Wix Code</a>." ],
            "links":
              [ "[postMessage( )](#postMessage)" ],
            "examples":
              [ { "title": "Receive a message from an HTML Component",
                  "body":
                    [ "$w(\"#myHtmlComponent\").onMessage( (event, $w) => {",
                      "  let receivedMessage = event.data;",
                      "} );" ] },
                { "title": "Send a message to an HTML Component and receive a confirmation",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Paste the following into the HTML Component:  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      "",
                      "&lt;!doctype html&gt;",
                      "&lt;html&gt;",
                      "&lt;head&gt;",
                      "",
                      "&lt;script type=\"text/javascript\"&gt;",
                      "function init () {",
                      "  // when a message is received from the page code",
                      "  window.onmessage = (event) =&gt; {",
                      "    if (event.data) {",
                      "      console.log(\"HTML Code Element received a message!\");",
                      "      insertMessage(event.data);",
                      "    }",
                      "  }",
                      "}",
                      "",
                      "// display received message",
                      "function insertMessage(msg) {",
                      "  document.getElementById('demo').innerHTML = msg;",
                      "  sendReturnMessage(\"Message from the HTML Component!\");",
                      "}",
                      "",
                      "// send message to the page code",
                      "function sendReturnMessage(msg) {",
                      "  window.parent.postMessage(msg, \"*\");",
                      "}",
                      "&lt;/script&gt;",
                      "",
                      "&lt;/head&gt;",
                      "",
                      "&lt;body onload=\"init();\" style=\"background-color:lightgray;\"&gt;",
                      "&lt;h1&gt;HTML Component Test&lt;/h1&gt;",
                      "&lt;p id=\"demo\"&gt;Message will go here&lt;/p&gt;",
                      "&lt;/body&gt;",
                      "&lt;/html&gt;",
                      "",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * This is the page code:                        *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * */",
                      "",
                      "$w.onReady(function () {",
                      "  // when a message is received from the HTML Component",
                      "  $w(\"#myHtmlComponent\").onMessage( (event, $w) => {",
                      "    console.log(`Message received by page code: ${event.data}`);",
                      "  } );",
                      "} );",
                      "",
                      "export function messageSendButton_onClick() {",
                      "  // send message to the HTML Component",
                      "  $w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");",
                      "}" ] } ] },
        "srcDocs":
          { "summary": "Adds an event handler that will run when the HTML Component\n sends a message.",
            "description":
              [ "The `onMessage()` function allows your page code to receive messages",
                " from an HTML Component on your page. When a message is received,",
                " the specified event handler is executed and the message can be retrieved",
                " using `event.data`.",
                "",
                " To send a message from your HTML Component, use the postMessage() function",
                " in the HTML component's code. Generally, you will be calling postMessage()",
                " from within a function:",
                "",
                "     &lt;script type=\"text/javascript\"&gt;",
                "       function sendReturnMessage(msg) {",
                "         window.parent.postMessage(msg, \"*\");",
                "       }",
                "     &lt;/script&gt;",
                "",
                "",
                " For more information on sending and receiving messages between your page",
                " and your HTML Component, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code#messaging-1\" target=\"_blank\">Working with the HTML Component in Wix Code</a>." ],
            "links":
              [ "[postMessage( )](#postMessage)" ],
            "examples":
              [ { "title": "Receive a message from an HTML Component",
                  "body":
                    [ "$w(\"#myHtmlComponent\").onMessage( (event, $w) => {",
                      "  let receivedMessage = event.data;",
                      "} );" ] },
                { "title": "Send a message to an HTML Component and receive a confirmation",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Paste the following into the HTML Component:  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      "",
                      "&lt;!doctype html&gt;",
                      "&lt;html&gt;",
                      "&lt;head&gt;",
                      "",
                      "&lt;script type=\"text/javascript\"&gt;",
                      "function init () {",
                      "  // when a message is received from the page code",
                      "  window.onmessage = (event) =&gt; {",
                      "    if (event.data) {",
                      "      console.log(\"HTML Code Element received a message!\");",
                      "      insertMessage(event.data);",
                      "    }",
                      "  }",
                      "}",
                      "",
                      "// display received message",
                      "function insertMessage(msg) {",
                      "  document.getElementById('demo').innerHTML = msg;",
                      "  sendReturnMessage(\"Message from the HTML Component!\");",
                      "}",
                      "",
                      "// send message to the page code",
                      "function sendReturnMessage(msg) {",
                      "  window.parent.postMessage(msg, \"*\");",
                      "}",
                      "&lt;/script&gt;",
                      "",
                      "&lt;/head&gt;",
                      "",
                      "&lt;body onload=\"init();\" style=\"background-color:lightgray;\"&gt;",
                      "&lt;h1&gt;HTML Component Test&lt;/h1&gt;",
                      "&lt;p id=\"demo\"&gt;Message will go here&lt;/p&gt;",
                      "&lt;/body&gt;",
                      "&lt;/html&gt;",
                      "",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * This is the page code:                        *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * */",
                      "",
                      "$w.onReady(function () {",
                      "  // when a message is received from the HTML Component",
                      "  $w(\"#myHtmlComponent\").onMessage( (event, $w) => {",
                      "    console.log(`Message received by page code: ${event.data}`);",
                      "  } );",
                      "} );",
                      "",
                      "export function messageSendButton_onClick() {",
                      "  // send message to the HTML Component",
                      "  $w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");",
                      "}" ] } ] } },
      { "name": "postMessage",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "msg",
              "type":
                [ "string",
                  "Object" ],
              "doc": "The message to send to the HTML Component.",
              "srcDoc": "The message to send to the HTML Component." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "HtmlComponent.es6",
              "lineno": 110 } ],
        "docs":
          { "summary": "Sends a message to the HTML Component.",
            "description":
              [ "The `postMessage()` function sends a message from your page code to the",
                " HTML Component.",
                "",
                " To receive a message in your HTML Component, create an event handler for",
                " the `window.onmessage` event in the component's code. You create the",
                " event handler within an HTML `<script>` tag. You get the received data",
                " by getting the data property of the event handler's event parameter.",
                "",
                " Often, you will define the `window.onMessage` event handler in a function",
                " that gets called when the HTML component loads using the `body onload`",
                " or `window.onload`:",
                "",
                "     &lt;script type=\"text/javascript\"&gt;",
                "       window.onmessage = (event) => {",
                "         if (event.data) {",
                "           console.log(`HTML Component received a message: ${event.data}`);",
                "           // additional code here",
                "         }",
                "       }",
                "     &lt;/script&gt;",
                "",
                "",
                " For more information on sending and receiving messages between your page",
                " and your HTML Component, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code#messaging-1\" target=\"_blank\">Working with the HTML Component in Wix Code</a>." ],
            "links":
              [ "[onMessage( )](#onMessage)" ],
            "examples":
              [ { "title": "Send a message to an HTML Component",
                  "body":
                    [ "$w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");" ] },
                { "title": "Send a message to an HTML Component and receive a confirmation",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Paste the following into the HTML Component:  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      "",
                      "&lt;!doctype html&gt;",
                      "&lt;html&gt;",
                      "&lt;head&gt;",
                      "",
                      "&lt;script type=\"text/javascript\"&gt;",
                      "function init () {",
                      "  // when a message is received from the page code",
                      "  window.onmessage = (event) =&gt; {",
                      "    if (event.data) {",
                      "      console.log(\"HTML Code Element received a message!\");",
                      "      insertMessage(event.data);",
                      "    }",
                      "  }",
                      "}",
                      "",
                      "// display received message",
                      "function insertMessage(msg) {",
                      "  document.getElementById('demo').innerHTML = msg;",
                      "  sendReturnMessage(\"Message from the HTML Component!\");",
                      "}",
                      "",
                      "// send message to the page code",
                      "function sendReturnMessage(msg) {",
                      "  window.parent.postMessage(msg, \"*\");",
                      "}",
                      "&lt;/script&gt;",
                      "",
                      "&lt;/head&gt;",
                      "",
                      "&lt;body onload=\"init();\" style=\"background-color:lightgray;\"&gt;",
                      "&lt;h1&gt;HTML Component Test&lt;/h1&gt;",
                      "&lt;p id=\"demo\"&gt;Message will go here&lt;/p&gt;",
                      "&lt;/body&gt;",
                      "&lt;/html&gt;",
                      "",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * This is the page code:                        *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * */",
                      "",
                      "$w.onReady(function () {",
                      "  // when a message is received from the HTML Component",
                      "  $w(\"#myHtmlComponent\").onMessage( (event, $w) => {",
                      "    console.log(`Message received by page code: ${event.data}`);",
                      "  } );",
                      "} );",
                      "",
                      "export function messageSendButton_onClick() {",
                      "  // send message to the HTML Component",
                      "  $w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");",
                      "}" ] } ] },
        "srcDocs":
          { "summary": "Sends a message to the HTML Component.",
            "description":
              [ "The `postMessage()` function sends a message from your page code to the",
                " HTML Component.",
                "",
                " To receive a message in your HTML Component, create an event handler for",
                " the `window.onmessage` event in the component's code. You create the",
                " event handler within an HTML `<script>` tag. You get the received data",
                " by getting the data property of the event handler's event parameter.",
                "",
                " Often, you will define the `window.onMessage` event handler in a function",
                " that gets called when the HTML component loads using the `body onload`",
                " or `window.onload`:",
                "",
                "     &lt;script type=\"text/javascript\"&gt;",
                "       window.onmessage = (event) => {",
                "         if (event.data) {",
                "           console.log(`HTML Component received a message: ${event.data}`);",
                "           // additional code here",
                "         }",
                "       }",
                "     &lt;/script&gt;",
                "",
                "",
                " For more information on sending and receiving messages between your page",
                " and your HTML Component, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code#messaging-1\" target=\"_blank\">Working with the HTML Component in Wix Code</a>." ],
            "links":
              [ "[onMessage( )](#onMessage)" ],
            "examples":
              [ { "title": "Send a message to an HTML Component",
                  "body":
                    [ "$w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");" ] },
                { "title": "Send a message to an HTML Component and receive a confirmation",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Paste the following into the HTML Component:  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      "",
                      "&lt;!doctype html&gt;",
                      "&lt;html&gt;",
                      "&lt;head&gt;",
                      "",
                      "&lt;script type=\"text/javascript\"&gt;",
                      "function init () {",
                      "  // when a message is received from the page code",
                      "  window.onmessage = (event) =&gt; {",
                      "    if (event.data) {",
                      "      console.log(\"HTML Code Element received a message!\");",
                      "      insertMessage(event.data);",
                      "    }",
                      "  }",
                      "}",
                      "",
                      "// display received message",
                      "function insertMessage(msg) {",
                      "  document.getElementById('demo').innerHTML = msg;",
                      "  sendReturnMessage(\"Message from the HTML Component!\");",
                      "}",
                      "",
                      "// send message to the page code",
                      "function sendReturnMessage(msg) {",
                      "  window.parent.postMessage(msg, \"*\");",
                      "}",
                      "&lt;/script&gt;",
                      "",
                      "&lt;/head&gt;",
                      "",
                      "&lt;body onload=\"init();\" style=\"background-color:lightgray;\"&gt;",
                      "&lt;h1&gt;HTML Component Test&lt;/h1&gt;",
                      "&lt;p id=\"demo\"&gt;Message will go here&lt;/p&gt;",
                      "&lt;/body&gt;",
                      "&lt;/html&gt;",
                      "",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * This is the page code:                        *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * */",
                      "",
                      "$w.onReady(function () {",
                      "  // when a message is received from the HTML Component",
                      "  $w(\"#myHtmlComponent\").onMessage( (event, $w) => {",
                      "    console.log(`Message received by page code: ${event.data}`);",
                      "  } );",
                      "} );",
                      "",
                      "export function messageSendButton_onClick() {",
                      "  // send message to the HTML Component",
                      "  $w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");",
                      "}" ] } ] } } ],
  "callbacks": [],
  "messages": [] }