{ "name": "Element",
  "memberOf": "$w",
  "mixes":
    [ "$w.Node",
      "$w.ViewportMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "filename": "Element.es6",
      "lineno": 7 },
  "docs":
    { "summary": "Provides basic functionality for elements, which are screen objects\n that have physical attributes such as visibility.",
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "Provides basic functionality for elements, which are screen objects\n that have physical attributes such as visibility.",
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "rendered",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "filename": "Element.es6",
              "lineno": 20 } ],
        "docs":
          { "summary": "Indicates if an element is currently displayed on-screen.",
            "description":
              [ "If `rendered` is `true`, the element is in the current DOM structure and",
                " can be used.",
                "",
                " If `rendered` is `false` the element is not in the current DOM structure.",
                "",
                " Some reasons the element might not be in the DOM inclue:",
                "   + It is in a [slide]($w.Slide.html) which is not currently showing.",
                "   + It is in a mode which is not currently active. For example, it is in",
                "     the hover mode of a [hover box]($w.HoverBox.html)." ],
            "links":
              [ "[collapsed]($w.HiddenMixin.html#collapsed)",
                "[hidden]($w.HiddenMixin.html#hidden)",
                "[isVisible]($w.HiddenMixin.html#isVisible)" ],
            "examples": [] },
        "srcDocs":
          { "summary": "Indicates if an element is currently displayed on-screen.",
            "description":
              [ "If `rendered` is `true`, the element is in the current DOM structure and",
                " can be used.",
                "",
                " If `rendered` is `false` the element is not in the current DOM structure.",
                "",
                " Some reasons the element might not be in the DOM inclue:",
                "   + It is in a [slide]($w.Slide.html) which is not currently showing.",
                "   + It is in a mode which is not currently active. For example, it is in",
                "     the hover mode of a [hover box]($w.HoverBox.html)." ],
            "links":
              [ "[collapsed]($w.HiddenMixin.html#collapsed)",
                "[hidden]($w.HiddenMixin.html#hidden)",
                "[isVisible]($w.HiddenMixin.html#isVisible)" ],
            "examples": [] } } ],
  "operations":
    [ { "name": "onMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved onto the\n element.",
              "srcDoc": "The name of the function or\n the function expression to run when the mouse pointer is moved onto the\n element." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added.",
            "srcDoc": "The element to which the event handler was added." },
        "locations":
          [ { "filename": "Element.es6",
              "lineno": 52 } ],
        "docs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n onto the element.",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse enters an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseIn( (event, $w) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ] } ] },
        "srcDocs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n onto the element.",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse enters an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseIn( (event, $w) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ] } ] } },
      { "name": "onMouseOut",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved off of\n the element.",
              "srcDoc": "The name of the function or\n the function expression to run when the mouse pointer is moved off of\n the element." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added.",
            "srcDoc": "The element to which the event handler was added." },
        "locations":
          [ { "filename": "Element.es6",
              "lineno": 81 } ],
        "docs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n off of the element.",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse exits an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseOut( (event, $w) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ] } ] },
        "srcDocs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n off of the element.",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse exits an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseOut( (event, $w) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ] } ] } } ],
  "callbacks": [],
  "messages": [] }