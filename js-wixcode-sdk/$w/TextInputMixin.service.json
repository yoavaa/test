{ "name": "TextInputMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "filename": "TextInputMixin.es6",
      "lineno": 5 },
  "docs":
    { "summary": "Provides functionality for elements that accept text as input.",
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "Provides functionality for elements that accept text as input.",
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "maxLength",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "filename": "TextInputMixin.es6",
              "lineno": 55 } ],
        "docs":
          { "summary": "Sets or gets the maximum number of characters that can be entered.",
            "description":
              [ "Setting the `maxLength` property of an input element to a",
                " positive number restricts user input, by manual entry or pasting, to",
                " text that does not exceed the `maxLength`. However, it does not limit",
                " your ability to change the element's value to one that exceeds",
                " `maxLength` programmatically.",
                "",
                " To remove the maximum length restriction that has been set on the input",
                " element, set `maxLength` to `0`.",
                "",
                " Getting the `maxLength` property returns the element's",
                " current `maxLength` setting.",
                "",
                " The number of characters is calculated by <a href=\"https://en.wikipedia.org/wiki/Code_point\"",
                " target=\"_blank\">Unicode code points</a>." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's maximum length",
                  "body":
                    [ "let maxLen = $w(\"#myElement\").maxLength; // 40" ] },
                { "title": "Set an element's maximum length",
                  "body":
                    [ "$w(\"#myElement\").maxLength = 40;" ] },
                { "title": "Remove an element's maximum length restriction",
                  "body":
                    [ "$w(\"#myElement\").maxLength = 0;" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the maximum number of characters that can be entered.",
            "description":
              [ "Setting the `maxLength` property of an input element to a",
                " positive number restricts user input, by manual entry or pasting, to",
                " text that does not exceed the `maxLength`. However, it does not limit",
                " your ability to change the element's value to one that exceeds",
                " `maxLength` programmatically.",
                "",
                " To remove the maximum length restriction that has been set on the input",
                " element, set `maxLength` to `0`.",
                "",
                " Getting the `maxLength` property returns the element's",
                " current `maxLength` setting.",
                "",
                " The number of characters is calculated by <a href=\"https://en.wikipedia.org/wiki/Code_point\"",
                " target=\"_blank\">Unicode code points</a>." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's maximum length",
                  "body":
                    [ "let maxLen = $w(\"#myElement\").maxLength; // 40" ] },
                { "title": "Set an element's maximum length",
                  "body":
                    [ "$w(\"#myElement\").maxLength = 40;" ] },
                { "title": "Remove an element's maximum length restriction",
                  "body":
                    [ "$w(\"#myElement\").maxLength = 0;" ] } ] } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "TextInputMixin.es6",
              "lineno": 11 } ],
        "docs":
          { "summary": "Sets or gets the element's placeholder text.",
            "description":
              [ "Placeholder text is typically used to provide a",
                " hint to the user of what to enter into a input element that accepts",
                " text. When the user begins to enter text, the placeholder text disappears." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's placeholder text",
                  "body":
                    [ "let placeholdText = $w(\"#myElement\").placeholder; // \"Enter name\"" ] },
                { "title": "Set an element's placeholder text",
                  "body":
                    [ "$w(\"#myElement\").placeholder = \"Enter your name\";" ] } ] },
        "srcDocs":
          { "summary": "Sets or gets the element's placeholder text.",
            "description":
              [ "Placeholder text is typically used to provide a",
                " hint to the user of what to enter into a input element that accepts",
                " text. When the user begins to enter text, the placeholder text disappears." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's placeholder text",
                  "body":
                    [ "let placeholdText = $w(\"#myElement\").placeholder; // \"Enter name\"" ] },
                { "title": "Set an element's placeholder text",
                  "body":
                    [ "$w(\"#myElement\").placeholder = \"Enter your name\";" ] } ] } } ],
  "operations":
    [ { "name": "onKeyPress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when a key is pressed.",
              "srcDoc": "The name of the function or\n the function expression to run when a key is pressed." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered.",
            "srcDoc": "The element on which the event is now registered." },
        "locations":
          [ { "filename": "TextInputMixin.es6",
              "lineno": 110 } ],
        "docs":
          { "summary": "Adds an event handler that runs when the cursor is inside the\n input element and a key is pressed.",
            "description":
              [ "A text input receives a `keyPress` event when a user presses a key on",
                " the keyboard while the cursor is inside the input element." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w(\"myElement\").onKeyPress( (event, $w) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ] },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event, $w) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.newValue; // \"SEA\"",
                      "} );" ] } ] },
        "srcDocs":
          { "summary": "Adds an event handler that runs when the cursor is inside the\n input element and a key is pressed.",
            "description":
              [ "A text input receives a `keyPress` event when a user presses a key on",
                " the keyboard while the cursor is inside the input element." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w(\"myElement\").onKeyPress( (event, $w) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ] },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event, $w) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.newValue;           // \"SEA\"",
                      "} );" ] } ] } } ],
  "callbacks": [],
  "messages": [] }