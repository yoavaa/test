{ "name": "ViewportMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "filename": "ViewportMixin.es6",
      "lineno": 4 },
  "docs":
    { "summary": "Provides functionality for elements that can be scrolled into and out\n of view.",
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "Provides functionality for elements that can be scrolled into and out\n of view.",
      "links": [],
      "examples": [] },
  "properties": [],
  "operations":
    [ { "name": "onViewportEnter",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element enters the viewport.",
              "srcDoc": "The name of the function or\n the function expression to run when the element enters the viewport." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered.",
            "srcDoc": "The element on which the event is now registered." },
        "locations":
          [ { "filename": "ViewportMixin.es6",
              "lineno": 12 } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element is scrolled\n into the viewable part of the current window.",
            "description":
              [ "An element enters the viewport when the page is scrolled to show any",
                " part of the element. An element enters the viewport even if it is hidden",
                " or collapsed." ],
            "links":
              [ "[onViewportLeave( )](#onViewportLeave)" ],
            "examples":
              [ { "title": "Get the ID of the element that has entered the viewport",
                  "body":
                    [ "$w(\"#myElement\").onViewportEnter( (event, $w) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ] } ] },
        "srcDocs":
          { "summary": "Adds an event handler that runs when an element is scrolled\n into the viewable part of the current window.",
            "description":
              [ "An element enters the viewport when the page is scrolled to show any",
                " part of the element. An element enters the viewport even if it is hidden",
                " or collapsed." ],
            "links":
              [ "[onViewportLeave( )](#onViewportLeave)" ],
            "examples":
              [ { "title": "Get the ID of the element that has entered the viewport",
                  "body":
                    [ "$w(\"#myElement\").onViewportEnter( (event, $w) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ] } ] } },
      { "name": "onViewportLeave",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element leaves the viewport.",
              "srcDoc": "The name of the function or\n the function expression to run when the element leaves the viewport." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered.",
            "srcDoc": "The element on which the event is now registered." },
        "locations":
          [ { "filename": "ViewportMixin.es6",
              "lineno": 45 } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element is scrolled\n out of the viewable part of the current window.",
            "description":
              [ "An element leaves the viewport when the page is scrolled so that the",
                " elements is completely out of view. An element leaves the viewport even",
                " if it is hidden or collapsed." ],
            "links":
              [ "[ViewportMixin-onViewportEnter( )](#onViewportEnter)" ],
            "examples":
              [ { "title": "Get the ID of the element that has entered the viewport",
                  "body":
                    [ "$w(\"#myElement\").onViewportLeave( (event, $w) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ] } ] },
        "srcDocs":
          { "summary": "Adds an event handler that runs when an element is scrolled\n out of the viewable part of the current window.",
            "description":
              [ "An element leaves the viewport when the page is scrolled so that the",
                " elements is completely out of view. An element leaves the viewport even",
                " if it is hidden or collapsed." ],
            "links":
              [ "[ViewportMixin-onViewportEnter( )](#onViewportEnter)" ],
            "examples":
              [ { "title": "Get the ID of the element that has entered the viewport",
                  "body":
                    [ "$w(\"#myElement\").onViewportLeave( (event, $w) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ] } ] } } ],
  "callbacks": [],
  "messages": [] }