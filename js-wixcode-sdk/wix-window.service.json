{ "name": "wix-window",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "filename": "window.es6",
      "lineno": 16 },
  "docs":
    { "summary": "The wix-window module contains functionality that pertains to the\n current browser window.",
      "description":
        [ "To use the window module, import `wixWindow` from the `wix-window` module:",
          "",
          "   ``` javascript",
          "   import wixWindow from 'wix-window';",
          "   ```",
          "",
          " The APIs in `wix-window` can only be used in front-end code." ],
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "The wix-window module contains functionality that pertains to the\n current browser window.",
      "description":
        [ "To use the window module, import `wixWindow` from the `wix-window` module:",
          "",
          "   ``` javascript",
          "   import wixWindow from 'wix-window';",
          "   ```",
          "",
          " The APIs in `wix-window` can only be used in front-end code." ],
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "formFactor",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 130 } ],
        "docs":
          { "summary": "Gets what kind of device is being used to view the page.",
            "description":
              [ "The `formFactor` property gets either:",
                "",
                " + `\"Desktop\"` - When viewed in a desktop browser.",
                " + `\"Mobile\"`  - When viewed in a mobile browser." ],
            "links": [],
            "examples":
              [ { "title": "Get a device's form factor",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let formFactor = wixWindow.formFactor;  // \"Mobile\"" ] } ] },
        "srcDocs":
          { "summary": "Gets what kind of device is being used to view the page.",
            "description":
              [ "The `formFactor` property gets either:",
                "",
                " + `\"Desktop\"` - When viewed in a desktop browser.",
                " + `\"Mobile\"`  - When viewed in a mobile browser." ],
            "links": [],
            "examples":
              [ { "title": "Get a device's form factor",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let formFactor = wixWindow.formFactor;  // \"Mobile\"" ] } ] } },
      { "name": "locale",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 150 } ],
        "docs":
          { "summary": "Gets the locale of the current environment.",
            "description":
              [ "A locale, also known as an IETF language tag, is an abbreviated code",
                " that defines the user's language, country, and other aspects of the user",
                " interface such as number format and date format.",
                "",
                " Some common locales include:",
                " + `\"en\"` - English",
                " + `\"es\"` - Spanish",
                " + `\"de\"` - German",
                " + `\"ja\"` - Japanese",
                " + `\"fr\"` - French",
                " + `\"it\"` - Italian" ],
            "links": [],
            "examples":
              [ { "title": "Get an environment's locale",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let locale = wixWindow.locale;  // \"en\"" ] } ] },
        "srcDocs":
          { "summary": "Gets the locale of the current environment.",
            "description":
              [ "A locale, also known as an IETF language tag, is an abbreviated code",
                " that defines the user's language, country, and other aspects of the user",
                " interface such as number format and date format.",
                "",
                " Some common locales include:",
                " + `\"en\"` - English",
                " + `\"es\"` - Spanish",
                " + `\"de\"` - German",
                " + `\"ja\"` - Japanese",
                " + `\"fr\"` - French",
                " + `\"it\"` - Italian" ],
            "links": [],
            "examples":
              [ { "title": "Get an environment's locale",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let locale = wixWindow.locale;  // \"en\"" ] } ] } },
      { "name": "referrer",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 177 } ],
        "docs":
          { "summary": "Gets the HTTP referrer header field.",
            "description":
              [ "The `referrer` is the address of the previous web page that the user was",
                " on before arriving at the current page, typically by clicking a link." ],
            "links": [],
            "examples":
              [ { "title": "Get the referrer information",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let referrer = wixWindow.referrer;  // \"http://somesite.com\"" ] } ] },
        "srcDocs":
          { "summary": "Gets the HTTP referrer header field.",
            "description":
              [ "The `referrer` is the address of the previous web page that the user was",
                " on before arriving at the current page, typically by clicking a link." ],
            "links": [],
            "examples":
              [ { "title": "Get the referrer information",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let referrer = wixWindow.referrer;  // \"http://somesite.com\"" ] } ] } },
      { "name": "viewMode",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 110 } ],
        "docs":
          { "summary": "Gets which mode the site is currently being viewed in.",
            "description":
              [ "The `viewMode` property gets either:",
                "",
                " + `\"Preview\"` - When previewing the site using the **Preview** button in the Editor.",
                " + `\"Site\"` - When viewing the published site." ],
            "links": [],
            "examples":
              [ { "title": "Get a window's view mode",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let viewMode = wixWindow.viewMode;  // \"Site\"" ] } ] },
        "srcDocs":
          { "summary": "Gets which mode the site is currently being viewed in.",
            "description":
              [ "The `viewMode` property gets either:",
                "",
                " + `\"Preview\"` - When previewing the site using the **Preview** button in the Editor.",
                " + `\"Site\"` - When viewing the published site." ],
            "links": [],
            "examples":
              [ { "title": "Get a window's view mode",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let viewMode = wixWindow.viewMode;  // \"Site\"" ] } ] } } ],
  "operations":
    [ { "name": "getBoundingRect",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-window~WindowSizeInfo" ] },
            "doc": "undefined. on fulfilled - An object containing information about the window's size, the document's size, and the current scroll position.",
            "srcDoc": "undefined. on fulfilled - An object containing information about the window's size, the document's size, and the current scroll position." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 209 } ],
        "docs":
          { "summary": "Returns information about the window.",
            "description":
              [ "The `getBoundingRect()` function returns a Promise that resolves to an object",
                " containing information about the current window's size, the document's size,",
                " and the current scroll position." ],
            "links": [],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Returns information about the window.",
            "description":
              [ "The `getBoundingRect()` function returns a Promise that resolves to an object",
                " containing information about the current window's size, the document's size,",
                " and the current scroll position." ],
            "links": [],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] } },
      { "name": "getCurrentGeolocation",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The coordinates and timestamp of the current location.. on rejected - The user blocked the geolocation popup.",
            "srcDoc": "undefined. on fulfilled - The coordinates and timestamp of the current location.. on rejected - The user blocked the geolocation popup." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 347 } ],
        "docs":
          { "summary": "Returns the current geolocation of the user.",
            "description":
              [ "The `getCurrentGeolocation()` function returns a Promise that resolves to an",
                " object containing the current geolocation of the user.",
                "",
                " The object contains the following key:value pairs:",
                " + `\"timestamp\"` - The geolocation timestamp representing the date and time at which the location was retrieved.",
                " + `\"coords\"` - An object that defines the location.",
                "   + `\"latitude\"` - The position's latitude in decimal degrees.",
                "   + `\"longitude\"` - The position's longitude in decimal degrees.",
                "   + `\"altitude\"` - The position's altitude in metres, relative to sea level. This value may be null if the browser cannot provide the data.",
                "   + `\"accuracy\"` - The accuracy in meters of the latitude and longitude properties.",
                "   + `\"altitudeAccuracy\"` - The accuracy in meters of the altitude property. This value may be null.",
                "   + `\"heading\"` - The direction in degrees in which the device is traveling. It indicates how far off from heading true north the device is. If `speed` is `0`, the heading is `NaN`. This value may be null if the browser cannot provide the data.",
                "   + `\"speed\"` - The velocity in meters per second of the device. This value may be null if the browser cannot provide the data." ],
            "links": [],
            "examples":
              [ { "title": "Get the geolocation data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getCurrentGeolocation()",
                      "  .then( (obj) => {",
                      "    let timestamp = obj.timestamp;                  // 1495027186984",
                      "    let latitude = obj.coords.latitude;             // 32.0971036",
                      "    let longitude = obj.coords.longitude;           // 34.774391099999995",
                      "    let altitude = obj.coords.altitude;             // null",
                      "    let accuracy = obj.coords.accuracy;             // 29",
                      "    let altAccuracy = obj.coords.altitudeAccuracy;  // null",
                      "    let heading = obj.coords.heading;               // null",
                      "    let speed = obj.coords.speed;                   // null",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error;",
                      "  });" ] } ] },
        "srcDocs":
          { "summary": "Returns the current geolocation of the user.",
            "description":
              [ "The `getCurrentGeolocation()` function returns a Promise that resolves to an",
                " object containing the current geolocation of the user.",
                "",
                " The object contains the following key:value pairs:",
                " + `\"timestamp\"` - The geolocation timestamp representing the date and time at which the location was retrieved.",
                " + `\"coords\"` - An object that defines the location.",
                "   + `\"latitude\"` - The position's latitude in decimal degrees.",
                "   + `\"longitude\"` - The position's longitude in decimal degrees.",
                "   + `\"altitude\"` - The position's altitude in metres, relative to sea level. This value may be null if the browser cannot provide the data.",
                "   + `\"accuracy\"` - The accuracy in meters of the latitude and longitude properties.",
                "   + `\"altitudeAccuracy\"` - The accuracy in meters of the altitude property. This value may be null.",
                "   + `\"heading\"` - The direction in degrees in which the device is traveling. It indicates how far off from heading true north the device is. If `speed` is `0`, the heading is `NaN`. This value may be null if the browser cannot provide the data.",
                "   + `\"speed\"` - The velocity in meters per second of the device. This value may be null if the browser cannot provide the data." ],
            "links": [],
            "examples":
              [ { "title": "Get the geolocation data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getCurrentGeolocation()",
                      "  .then( (obj) => {",
                      "    let timestamp = obj.timestamp;                  // 1495027186984",
                      "    let latitude = obj.coords.latitude;             // 32.0971036",
                      "    let longitude = obj.coords.longitude;           // 34.774391099999995",
                      "    let altitude = obj.coords.altitude;             // null",
                      "    let accuracy = obj.coords.accuracy;             // 29",
                      "    let altAccuracy = obj.coords.altitudeAccuracy;  // null",
                      "    let heading = obj.coords.heading;               // null",
                      "    let speed = obj.coords.speed;                   // null",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error;",
                      "  });" ] } ] } },
      { "name": "getRouterData",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "Object",
            "doc": "The data returned by the router.",
            "srcDoc": "The data returned by the router." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 324 } ],
        "docs":
          { "summary": "Returns the data that a router passed to the page in its response.",
            "description":
              [ "When you create a router and define its functionality in its [router()](wix-router.html#router)",
                " function, you can choose to send data along with the router's [response](wix-router.WixRouterResponse.html).",
                " That data is retrieved in the code of the page that was routed to using the",
                " `getRouterData()` function.",
                "",
                " If you call the `getRouterData()` function from a non-router page or a router",
                " page that wasn't sent any data, the function returns `null`." ],
            "links":
              [ "[router( )](wix-router.html#router)",
                "[WixRouterResponse](wix-router.WixRouterResponse.html)" ],
            "examples":
              [ { "title": "Get the data passed by a router",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let routerData = wixWindow.getRouterData();" ] } ] },
        "srcDocs":
          { "summary": "Returns the data that a router passed to the page in its response.",
            "description":
              [ "When you create a router and define its functionality in its [router()](wix-router.html#router)",
                " function, you can choose to send data along with the router's [response](wix-router.WixRouterResponse.html).",
                " That data is retrieved in the code of the page that was routed to using the",
                " `getRouterData()` function.",
                "",
                " If you call the `getRouterData()` function from a non-router page or a router",
                " page that wasn't sent any data, the function returns `null`." ],
            "links":
              [ "[router( )](wix-router.html#router)",
                "[WixRouterResponse](wix-router.WixRouterResponse.html)" ],
            "examples":
              [ { "title": "Get the data passed by a router",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let routerData = wixWindow.getRouterData();" ] } ] } },
      { "name": "openLightbox",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "name",
              "type": "string",
              "doc": "The name of the lightbox to open.",
              "srcDoc": "The name of the lightbox to open." },
            { "name": "data",
              "type": "Object",
              "doc": "The data to pass to the lightbox.",
              "srcDoc": "The data to pass to the lightbox.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The returned data from the lightbox.. on rejected - The error that caused the rejection.",
            "srcDoc": "undefined. on fulfilled - The returned data from the lightbox.. on rejected - The error that caused the rejection." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 391 } ],
        "docs":
          { "summary": "Opens a lightbox and optionally passes it the given data.",
            "description":
              [ "The `openLightbox()` function returns a Promise which is resolved when the",
                " lightbox closes. If the lightbox is closed programmatically using its",
                " [`close()`](wix-window.lightbox.html#close) function, and the",
                " [`close()`](wix-window.lightbox.html#close) function was invoked",
                " with a data parameter, then the Promise resolves to that data object.",
                "",
                " If you send a data object to the lightbox, use the [`getContext()`](#getContext)",
                " function in the lightbox's code to access the received data." ],
            "links": [],
            "examples":
              [ { "title": "Open a lightbox",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\");" ] },
                { "title": "Open a lightbox and send it data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj);" ] },
                { "title": "Open a lightbox and receive data when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\")",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] },
                { "title": "Open a lightbox, send it data, and receive data back when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj)",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Opens a lightbox and optionally passes it the given data.",
            "description":
              [ "The `openLightbox()` function returns a Promise which is resolved when the",
                " lightbox closes. If the lightbox is closed programmatically using its",
                " [`close()`](wix-window.lightbox.html#close) function, and the",
                " [`close()`](wix-window.lightbox.html#close) function was invoked",
                " with a data parameter, then the Promise resolves to that data object.",
                "",
                " If you send a data object to the lightbox, use the [`getContext()`](#getContext)",
                " function in the lightbox's code to access the received data." ],
            "links": [],
            "examples":
              [ { "title": "Open a lightbox",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\");" ] },
                { "title": "Open a lightbox and send it data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj);" ] },
                { "title": "Open a lightbox and receive data when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\")",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] },
                { "title": "Open a lightbox, send it data, and receive data back when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj)",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] } ] } },
      { "name": "scrollBy",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "x",
              "type": "number",
              "doc": "The horizontal offset, in pixels, to scroll by.",
              "srcDoc": "The horizontal offset, in pixels, to scroll by." },
            { "name": "y",
              "type": "number",
              "doc": "The vertical offset, in pixels, to scroll by.",
              "srcDoc": "The vertical offset, in pixels, to scroll by." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "undefined. on fulfilled - When the scroll is complete.",
            "srcDoc": "undefined. on fulfilled - When the scroll is complete." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 282 } ],
        "docs":
          { "summary": "Scrolls the page by a given number of pixels.",
            "description":
              [ "The `scrollBy()` function returns a Promise that resolves when the current",
                " page has been scrolled by the given number of pixels,",
                "",
                " The `x` and `y` parameters determine the number of horizontal and vertical",
                " pixels to scroll the current page. Negative numbers scroll up or to the",
                " left and positive numbers scroll down or to the right." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page by a given number of pixels",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500);" ] },
                { "title": "Scroll the page by a given number of pixels and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] },
        "srcDocs":
          { "summary": "Scrolls the page by a given number of pixels.",
            "description":
              [ "The `scrollBy()` function returns a Promise that resolves when the current",
                " page has been scrolled by the given number of pixels,",
                "",
                " The `x` and `y` parameters determine the number of horizontal and vertical",
                " pixels to scroll the current page. Negative numbers scroll up or to the",
                " left and positive numbers scroll down or to the right." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page by a given number of pixels",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500);" ] },
                { "title": "Scroll the page by a given number of pixels and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] } },
      { "name": "scrollTo",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "x",
              "type": "number",
              "doc": "The horizontal position, in pixels, to scroll to.",
              "srcDoc": "The horizontal position, in pixels, to scroll to." },
            { "name": "y",
              "type": "number",
              "doc": "The vertical position, in pixels, to scroll to.",
              "srcDoc": "The vertical position, in pixels, to scroll to." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "undefined. on fulfilled - When the scroll is complete.",
            "srcDoc": "undefined. on fulfilled - When the scroll is complete." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 236 } ],
        "docs":
          { "summary": "Scrolls the page to a specific location.",
            "description":
              [ "The `scrollTo()` function returns a Promise that resolves when the current",
                " page has been scrolled to the given location.",
                "",
                " The `x` and `y` parameters determine the top-left pixel that will be",
                " displayed on screen after the scroll.",
                "",
                " To scroll to a specific element on the page, see the `$w.Node`",
                " [`scrollTo()`]($w.Node.html) function." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page to a location",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500);" ] },
                { "title": "Scroll the page to a location and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] },
        "srcDocs":
          { "summary": "Scrolls the page to a specific location.",
            "description":
              [ "The `scrollTo()` function returns a Promise that resolves when the current",
                " page has been scrolled to the given location.",
                "",
                " The `x` and `y` parameters determine the top-left pixel that will be",
                " displayed on screen after the scroll.",
                "",
                " To scroll to a specific element on the page, see the `$w.Node`",
                " [`scrollTo()`]($w.Node.html) function." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page to a location",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500);" ] },
                { "title": "Scroll the page to a location and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "WindowSizeInfo",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 199 } ],
        "docs":
          { "summary": "An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.",
            "links":
              [ "[getBoundingRect( )](#getBoundingRect)" ],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.",
            "links":
              [ "[getBoundingRect( )](#getBoundingRect)" ],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] },
        "members":
          [ { "name": "window",
              "type": "Object",
              "docs": "An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window.",
              "srcDocs": "An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window." },
            { "name": "document",
              "type": "Object",
              "docs": "An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window.",
              "srcDocs": "An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window." },
            { "name": "scroll",
              "type": "Object",
              "docs": "An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner.",
              "srcDocs": "An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner." } ],
        "labels": [] } ] }